/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testingapi_s.api_testing_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingapi_s.api_testing_db.ProductDetails;
import com.testingapi_s.api_testing_db.Products;


/**
 * ServiceImpl object for domain model class Products.
 *
 * @see Products
 */
@Service("API_TESTING_DB.ProductsService")
public class ProductsServiceImpl implements ProductsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductsServiceImpl.class);

    @Autowired
	@Qualifier("API_TESTING_DB.ProductDetailsService")
	private ProductDetailsService productDetailsService;

    @Autowired
    @Qualifier("API_TESTING_DB.ProductsDao")
    private WMGenericDao<Products, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Products, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "API_TESTING_DBTransactionManager")
    @Override
	public Products create(Products products) {
        LOGGER.debug("Creating a new Products with information: {}", products);
        Products productsCreated = this.wmGenericDao.create(products);
        if(productsCreated.getProductDetails() != null) {
            ProductDetails productDetails = productsCreated.getProductDetails();
            LOGGER.debug("Creating a new child ProductDetails with information: {}", productDetails);
            productDetails.setProducts(productsCreated);
            productDetailsService.create(productDetails);
        }
        return productsCreated;
    }

	@Transactional(readOnly = true, value = "API_TESTING_DBTransactionManager")
	@Override
	public Products getById(Integer productsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Products by id: {}", productsId);
        Products products = this.wmGenericDao.findById(productsId);
        if (products == null){
            LOGGER.debug("No Products found with id: {}", productsId);
            throw new EntityNotFoundException(String.valueOf(productsId));
        }
        return products;
    }

    @Transactional(readOnly = true, value = "API_TESTING_DBTransactionManager")
	@Override
	public Products findById(Integer productsId) {
        LOGGER.debug("Finding Products by id: {}", productsId);
        return this.wmGenericDao.findById(productsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "API_TESTING_DBTransactionManager")
	@Override
	public Products update(Products products) throws EntityNotFoundException {
        LOGGER.debug("Updating Products with information: {}", products);
        this.wmGenericDao.update(products);

        Integer productsId = products.getProductId();

        return this.wmGenericDao.findById(productsId);
    }

    @Transactional(value = "API_TESTING_DBTransactionManager")
	@Override
	public Products delete(Integer productsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Products with id: {}", productsId);
        Products deleted = this.wmGenericDao.findById(productsId);
        if (deleted == null) {
            LOGGER.debug("No Products found with id: {}", productsId);
            throw new EntityNotFoundException(String.valueOf(productsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "API_TESTING_DBTransactionManager")
	@Override
	public Page<Products> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Products");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "API_TESTING_DBTransactionManager")
    @Override
    public Page<Products> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Products");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "API_TESTING_DBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service API_TESTING_DB for table Products to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "API_TESTING_DBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ProductDetailsService instance
	 */
	protected void setProductDetailsService(ProductDetailsService service) {
        this.productDetailsService = service;
    }

}

