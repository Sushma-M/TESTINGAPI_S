/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testingapi_s.api_testing_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingapi_s.api_testing_db.ProductDetails;


/**
 * ServiceImpl object for domain model class ProductDetails.
 *
 * @see ProductDetails
 */
@Service("API_TESTING_DB.ProductDetailsService")
public class ProductDetailsServiceImpl implements ProductDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductDetailsServiceImpl.class);


    @Autowired
    @Qualifier("API_TESTING_DB.ProductDetailsDao")
    private WMGenericDao<ProductDetails, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ProductDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "API_TESTING_DBTransactionManager")
    @Override
	public ProductDetails create(ProductDetails productDetails) {
        LOGGER.debug("Creating a new ProductDetails with information: {}", productDetails);
        ProductDetails productDetailsCreated = this.wmGenericDao.create(productDetails);
        return productDetailsCreated;
    }

	@Transactional(readOnly = true, value = "API_TESTING_DBTransactionManager")
	@Override
	public ProductDetails getById(Integer productdetailsId) throws EntityNotFoundException {
        LOGGER.debug("Finding ProductDetails by id: {}", productdetailsId);
        ProductDetails productDetails = this.wmGenericDao.findById(productdetailsId);
        if (productDetails == null){
            LOGGER.debug("No ProductDetails found with id: {}", productdetailsId);
            throw new EntityNotFoundException(String.valueOf(productdetailsId));
        }
        return productDetails;
    }

    @Transactional(readOnly = true, value = "API_TESTING_DBTransactionManager")
	@Override
	public ProductDetails findById(Integer productdetailsId) {
        LOGGER.debug("Finding ProductDetails by id: {}", productdetailsId);
        return this.wmGenericDao.findById(productdetailsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "API_TESTING_DBTransactionManager")
	@Override
	public ProductDetails update(ProductDetails productDetails) throws EntityNotFoundException {
        LOGGER.debug("Updating ProductDetails with information: {}", productDetails);
        this.wmGenericDao.update(productDetails);

        Integer productdetailsId = productDetails.getProductId();

        return this.wmGenericDao.findById(productdetailsId);
    }

    @Transactional(value = "API_TESTING_DBTransactionManager")
	@Override
	public ProductDetails delete(Integer productdetailsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ProductDetails with id: {}", productdetailsId);
        ProductDetails deleted = this.wmGenericDao.findById(productdetailsId);
        if (deleted == null) {
            LOGGER.debug("No ProductDetails found with id: {}", productdetailsId);
            throw new EntityNotFoundException(String.valueOf(productdetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "API_TESTING_DBTransactionManager")
	@Override
	public Page<ProductDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ProductDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "API_TESTING_DBTransactionManager")
    @Override
    public Page<ProductDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ProductDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "API_TESTING_DBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service API_TESTING_DB for table ProductDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "API_TESTING_DBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

