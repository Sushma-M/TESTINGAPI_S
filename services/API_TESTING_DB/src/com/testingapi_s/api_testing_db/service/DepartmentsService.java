/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testingapi_s.api_testing_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testingapi_s.api_testing_db.Departments;

/**
 * Service object for domain model class {@link Departments}.
 */
public interface DepartmentsService {

    /**
     * Creates a new Departments. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Departments if any.
     *
     * @param departments Details of the Departments to be created; value cannot be null.
     * @return The newly created Departments.
     */
	Departments create(Departments departments);


	/**
	 * Returns Departments by given id if exists.
	 *
	 * @param departmentsId The id of the Departments to get; value cannot be null.
	 * @return Departments associated with the given departmentsId.
     * @throws EntityNotFoundException If no Departments is found.
	 */
	Departments getById(Integer departmentsId) throws EntityNotFoundException;

    /**
	 * Find and return the Departments by given id if exists, returns null otherwise.
	 *
	 * @param departmentsId The id of the Departments to get; value cannot be null.
	 * @return Departments associated with the given departmentsId.
	 */
	Departments findById(Integer departmentsId);

    /**
	 * Find and return the Departments for given deptCode  if exists.
	 *
	 * @param deptCode value of deptCode; value cannot be null.
	 * @return Departments associated with the given inputs.
     * @throws EntityNotFoundException if no matching Departments found.
	 */
    Departments getByDeptCode(String deptCode)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing Departments. It replaces all fields of the existing Departments with the given departments.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Departments if any.
     *
	 * @param departments The details of the Departments to be updated; value cannot be null.
	 * @return The updated Departments.
	 * @throws EntityNotFoundException if no Departments is found with given input.
	 */
	Departments update(Departments departments) throws EntityNotFoundException;

    /**
	 * Deletes an existing Departments with the given id.
	 *
	 * @param departmentsId The id of the Departments to be deleted; value cannot be null.
	 * @return The deleted Departments.
	 * @throws EntityNotFoundException if no Departments found with the given id.
	 */
	Departments delete(Integer departmentsId) throws EntityNotFoundException;

	/**
	 * Find all Departments matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Departments.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Departments> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Departments matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Departments.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Departments> findAll(String query, Pageable pageable);

    /**
	 * Exports all Departments matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Departments in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Departments.
	 */
	long count(String query);


}

