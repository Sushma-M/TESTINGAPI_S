/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testingapi_s.api_testing_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.testingapi_s.api_testing_db.Departments;
import com.testingapi_s.api_testing_db.service.DepartmentsService;

/**
 * Controller object for domain model class Departments.
 * @see Departments
 */
@RestController("API_TESTING_DB.DepartmentsController")
@Api(value = "DepartmentsController", description = "Exposes APIs to work with Departments resource.")
@RequestMapping("/API_TESTING_DB/Departments")
public class DepartmentsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DepartmentsController.class);

    @Autowired
    @Qualifier("API_TESTING_DB.DepartmentsService")
    private DepartmentsService departmentsService;

    @ApiOperation(value = "Creates a new Departments instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Departments createDepartments(@RequestBody Departments departments) {
        LOGGER.debug("Create Departments with information: {}", departments);
        departments = departmentsService.create(departments);
        LOGGER.debug("Created Departments with information: {}", departments);
        return departments;
    }

    @ApiOperation(value = "Returns the Departments instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Departments getDepartments(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Departments with id: {}", id);
        Departments foundDepartments = departmentsService.getById(id);
        LOGGER.debug("Departments details with id: {}", foundDepartments);
        return foundDepartments;
    }

    @ApiOperation(value = "Updates the Departments instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Departments editDepartments(@PathVariable("id") Integer id, @RequestBody Departments departments) throws EntityNotFoundException {
        LOGGER.debug("Editing Departments with id: {}", departments.getDeptId());
        departments.setDeptId(id);
        departments = departmentsService.update(departments);
        LOGGER.debug("Departments details with id: {}", departments);
        return departments;
    }

    @ApiOperation(value = "Deletes the Departments instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDepartments(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Departments with id: {}", id);
        Departments deletedDepartments = departmentsService.delete(id);
        return deletedDepartments != null;
    }

    @RequestMapping(value = "/deptCode/{deptCode}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Departments with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Departments getByDeptCode(@PathVariable("deptCode") String deptCode) {
        LOGGER.debug("Getting Departments with uniques key DeptCode");
        return departmentsService.getByDeptCode(deptCode);
    }

    /**
     * @deprecated Use {@link #findDepartments(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Departments instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Departments> findDepartments(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Departments list");
        return departmentsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Departments instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Departments> findDepartments(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Departments list");
        return departmentsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDepartments(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return departmentsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Departments instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countDepartments(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Departments");
        return departmentsService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DepartmentsService instance
	 */
    protected void setDepartmentsService(DepartmentsService service) {
        this.departmentsService = service;
    }
}
