/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testingapi_s.export1.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.testingapi_s.export1.ServerDefTable1;
import com.testingapi_s.export1.service.ServerDefTable1Service;

/**
 * Controller object for domain model class ServerDefTable1.
 * @see ServerDefTable1
 */
@RestController("Export1.ServerDefTable1Controller")
@Api(value = "ServerDefTable1Controller", description = "Exposes APIs to work with ServerDefTable1 resource.")
@RequestMapping("/Export1/ServerDefTable1")
public class ServerDefTable1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServerDefTable1Controller.class);

    @Autowired
    @Qualifier("Export1.ServerDefTable1Service")
    private ServerDefTable1Service serverDefTable1Service;

    @ApiOperation(value = "Creates a new ServerDefTable1 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServerDefTable1 createServerDefTable1(@RequestBody ServerDefTable1 serverDefTable1) {
        LOGGER.debug("Create ServerDefTable1 with information: {}", serverDefTable1);
        serverDefTable1 = serverDefTable1Service.create(serverDefTable1);
        LOGGER.debug("Created ServerDefTable1 with information: {}", serverDefTable1);
        return serverDefTable1;
    }

    @ApiOperation(value = "Returns the ServerDefTable1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServerDefTable1 getServerDefTable1(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ServerDefTable1 with id: {}", id);
        ServerDefTable1 foundServerDefTable1 = serverDefTable1Service.getById(id);
        LOGGER.debug("ServerDefTable1 details with id: {}", foundServerDefTable1);
        return foundServerDefTable1;
    }

    @ApiOperation(value = "Updates the ServerDefTable1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ServerDefTable1 editServerDefTable1(@PathVariable("id") Integer id, @RequestBody ServerDefTable1 serverDefTable1) throws EntityNotFoundException {
        LOGGER.debug("Editing ServerDefTable1 with id: {}", serverDefTable1.getId());
        serverDefTable1.setId(id);
        serverDefTable1 = serverDefTable1Service.update(serverDefTable1);
        LOGGER.debug("ServerDefTable1 details with id: {}", serverDefTable1);
        return serverDefTable1;
    }

    @ApiOperation(value = "Deletes the ServerDefTable1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteServerDefTable1(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ServerDefTable1 with id: {}", id);
        ServerDefTable1 deletedServerDefTable1 = serverDefTable1Service.delete(id);
        return deletedServerDefTable1 != null;
    }

    /**
     * @deprecated Use {@link #findServerDefTable1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ServerDefTable1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ServerDefTable1> findServerDefTable1s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ServerDefTable1s list");
        return serverDefTable1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of ServerDefTable1 instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ServerDefTable1> findServerDefTable1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ServerDefTable1s list");
        return serverDefTable1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportServerDefTable1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return serverDefTable1Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of ServerDefTable1 instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countServerDefTable1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting ServerDefTable1s");
        return serverDefTable1Service.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ServerDefTable1Service instance
	 */
    protected void setServerDefTable1Service(ServerDefTable1Service service) {
        this.serverDefTable1Service = service;
    }
}
